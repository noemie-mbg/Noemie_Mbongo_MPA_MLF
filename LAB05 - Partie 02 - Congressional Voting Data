import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import tensorflow as tf
import matplotlib.pyplot as plt

# Loading dataset

path_to_dataset = 'drive/MyDrive/MPA-MLF/EX_5/voting_complete.csv' # change the PATH
pd_dataset = pd.read_csv(path_to_dataset)

pd_dataset

# Train/Test Split

def train_test_split(pd_data: pd.DataFrame, test_ratio: float = 0.2) -> tuple: # define a function for train and test split
    pd_dataset = pd_data.copy()
    pd_dataset = pd_dataset[pd_dataset.columns[1:]]
    index = np.arange(len(pd_dataset))
    index = np.random.permutation(index)
    train_ammount = int(len(index)*test_ratio)
    train_ids = index[train_ammount:]
    test_ids = index[:train_ammount]
    
    train_dataset = pd_dataset[pd_dataset.index.isin(train_ids)].reset_index()
    test_dataset = pd_dataset[pd_dataset.index.isin(test_ids)].reset_index()
    
    train_dataset = train_dataset[train_dataset.columns[1:]]
    test_dataset = test_dataset[test_dataset.columns[1:]]

    return train_dataset[train_dataset.columns[1:]], train_dataset[train_dataset.columns[0]], test_dataset[test_dataset.columns[1:]], test_dataset[test_dataset.columns[0]]

x_train, y_train, x_test, y_test = train_test_split(pd_dataset)

# Data examination

x_train

# 4. Data preprocessing

# Remplacement des valeurs '?' par NaN
x_train.replace('?', np.nan, inplace=True)
x_test.replace('?', np.nan, inplace=True)

# Imputation des valeurs manquantes avec la valeur la plus fréquente (mode)
x_train.fillna(x_train.mode().iloc[0], inplace=True)
x_test.fillna(x_test.mode().iloc[0], inplace=True)

# Encodage One-Hot des variables catégoriques
x = pd.get_dummies(x_train)  # Encodage One-Hot
x_test_encoded = pd.get_dummies(x_test)

# Assurer que les colonnes sont identiques entre train et test
x_train_encoded, x_test_encoded = x.align(x_test_encoded, join='left', axis=1, fill_value=0)

# Encodage de la variable cible
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# Affichage des résultats
print("X Train Encoded:\n", x_train_encoded.head())
print("Y Train Encoded:\n", y_train_encoded[:5])

# 5.Creating the model

# 7. Model Evaluation




